generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model chat_room {
  id                 BigInt    @id @default(autoincrement())
  roomName           String?   @db.VarChar
  roomCreator        BigInt?
  roomJoinLimitation Int?      @default(1)
  createdAt          DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime? @default(now()) @db.Timestamptz(6)
}

model comments {
  id        Int      @id @default(autoincrement())
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String?
  posts     posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  users     users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model oauth_accounts {
  providerUserId        String
  connectedAt           DateTime @default(now())
  synchedAt             DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime
  accessToken           String
  refreshToken          String
  id                    String   @id
  userId                String
  provider              String
  accessTokenExpiresIn  DateTime
  refreshTokenExpiresIn DateTime
  users                 users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
}

model post_likes {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  createdAt DateTime @default(now())
  posts     posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model post_views {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  createdAt DateTime @default(now())
  posts     posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model posts {
  id             Int          @id @default(autoincrement())
  title          String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @default(now())
  userId         String
  stockId        Int
  thumbnailImage String?
  score          Float        @default(0)
  comments       comments[]
  post_likes     post_likes[]
  post_views     post_views[]
  stocks         stocks       @relation(fields: [stockId], references: [id], onDelete: Cascade)
  users          users        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model selected_stocks {
  userId  String
  stockId Int
  id      Int    @id @default(autoincrement())
  stocks  stocks @relation(fields: [stockId], references: [id])
  users   users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stockId])
}

model stocks {
  name            String
  id              Int               @id @default(autoincrement())
  logoUrl         String
  refUrl          String?
  sector          String
  subSector       String
  summary         String
  symbol          String
  posts           posts[]
  selected_stocks selected_stocks[]
}

model users {
  nickname        String
  profileImage    String
  ageRange        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  birthday        String
  birthyear       String
  email           String            @unique
  name            String
  id              String            @id
  gender          String?
  role            Role              @default(USER)
  lastLoginAt     DateTime          @default(now())
  comments        comments[]
  oauth_accounts  oauth_accounts[]
  post_likes      post_likes[]
  post_views      post_views[]
  posts           posts[]
  selected_stocks selected_stocks[]
}

enum Role {
  ADMIN
  USER
}
